{"version":3,"sources":["componants/Alert.js","componants/Navbar.js","componants/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalization","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","newText","showAlert","document","getElementById","select","navigator","clipboard","writeText","split","join","length","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d36119a2.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n const capitalization= (word) => {\r\n  const lower = word.toLowerCase();\r\n  return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n }\r\n\r\n return (\r\n  props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n   <strong>{capitalization(props.alert.type)}</strong>: {props.alert.msg}\r\n </div>\r\n )\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n return (\r\n  <div>\r\n   <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"# \">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"# \">Home</a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n              <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n            </li> */}\r\n            \r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n\r\n  </div>\r\n )\r\n}\r\n\r\nNavbar.propTypes = {\r\n title: PropTypes.string.isRequired,\r\n aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n title: 'Set title here',\r\n aboutText: 'About text here'\r\n}","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n const handleUpClick = () =>{\r\n  // console.log(\"Uppercase was clicked\" + text);\r\n  let newText = text.toUpperCase();\r\n  setText(newText);\r\n  props.showAlert(\"Converted to uppercase!\" , \"success\");\r\n }\r\n\r\n const handleLoClick = () =>{\r\n  let newText = text.toLowerCase();\r\n  setText(newText);\r\n  props.showAlert(\"Converted to lowercase!\" , \"success\");\r\n }\r\n\r\n const handleClearClick = () =>{\r\n  let newText = '';\r\n  setText(newText);\r\n  props.showAlert(\"Text cleared!\" , \"success\");\r\n }\r\n\r\n const handleOnchange = (event) =>{\r\n  // console.log(\"On change\");\r\n  setText(event.target.value)\r\n }\r\n\r\n const handleCopy = () =>{\r\n   var text = document.getElementById(\"myBox\");\r\n   text.select();\r\n   navigator.clipboard.writeText(text.value);\r\n   props.showAlert(\"Copied to Clipboard!\" , \"success\");\r\n }\r\n\r\n const handleExtraSpaces = () =>{\r\n   let newText = text.split(/[ ]+/);\r\n   setText(newText.join(\" \"));\r\n   props.showAlert(\"Extra spaces removed!\" , \"success\");\r\n }\r\n\r\n const [text,setText] = useState('');\r\n return (\r\n   <>\r\n    <div className=\"container\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n      <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <textarea className=\"form-control\" value={text} onChange={handleOnchange} id=\"myBox\"      style={{backgroundColor:props.mode === 'dark'?'grey':'white', color:props.mode === 'dark'?'white':'black'}} rows=\"8\"></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleClearClick}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleCopy}>Copy Text</button>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleExtraSpaces}>Remove Extra spaces</button>\r\n      \r\n    </div>\r\n\r\n    <div className=\"container my-3\" style={{color: props.mode === 'dark'?'white':'black'}}>\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0 ? text : \"Enter something in the textbox above to preview is here\"}</p>\r\n    </div>\r\n   </>\r\n  \r\n )\r\n}\r\n","import React, {useState} from 'react'\nimport './App.css'\nimport Alert from './componants/Alert';\n// import About from './componants/About';\nimport Navbar from './componants/Navbar';\nimport TextForm from './componants/TextForm';\n\n\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   // Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [mode,setMode] = useState('light');\n\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n\n  }\n\n  const toggleMode = ()=>{\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode has been enabled\" , \"success\");\n      document.title = \"TextUtils - Dark mode\"\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode has been enabled\" , \"success\");\n      document.title = \"TextUtils - Light mode\"\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\n\n    <Alert alert = {alert}/>\n\n    <div className=\"container my-3\">\n     {/* <Switch>   */}\n        {/* <Route exact path=\"/about\">\n          <About />\n        </Route> */}\n        {/* <Route exact path=\"/\"> */}\n          {/* <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/> */}\n        {/* </Route> */}\n      {/* </Switch> */}\n      <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n    </div>\n    {/* </Router> */}\n    </>\n    \n  );\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}